#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Configuração do display LCD
LiquidCrystal_I2C lcd(0x27, 16, 2); // Endereço I2C, 16 colunas, 2 linhas

// Configuração do Wi-Fi
const char* ssid = "Coldbox";           // Nome da rede Wi-Fi
const char* password = "10203040";      // Senha da rede Wi-Fi

// Configuração do servidor
const char* serverName = "http://127.0.0.1:3333/arduino"; // IP do servidor e porta da API
int equip_id = 1; // ID do equipamento

// Configuração do sensor DHT
#define DHTPIN 4       // Pino onde o DHT está conectado
#define DHTTYPE DHT22  // Tipo do sensor DHT (DHT11, DHT22, etc.)
DHT dht(DHTPIN, DHTTYPE);

void setup() {
    Serial.begin(9600);
    lcd.init();             // Inicializa o display LCD
    lcd.backlight();        // Liga a luz de fundo do LCD
    lcd.print("Conectando..."); // Exibe mensagem inicial no LCD

    // Conexão Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        Serial.println("Conectando ao WiFi...");
        lcd.setCursor(0, 0);
        lcd.print("WiFi: Tentando   ");
        delay(1000);
    }
    Serial.println("Conectado ao WiFi!");
    lcd.setCursor(0, 0);
    lcd.print("WiFi: Conectado  ");

    dht.begin();
}

void loop() {
    String statusEnvio = "Conectado";

    // Atualiza status do Wi-Fi
    if (WiFi.status() != WL_CONNECTED) {
        lcd.setCursor(0, 0);
        lcd.print("WiFi: Desconect. ");
        Serial.println("WiFi desconectado. Tentando reconectar...");
        while (WiFi.status() != WL_CONNECTED) {
            WiFi.begin(ssid, password);
            delay(5000);
        }
        Serial.println("Reconectado ao WiFi!");
        statusEnvio = "Conectado";
    }

    // Leitura dos dados do sensor DHT
    float temperatura = dht.readTemperature();
    float umidade = dht.readHumidity();

    if (!isnan(temperatura) && !isnan(umidade)) {
        // Exibe temperatura e umidade no LCD
        lcd.setCursor(0, 1);
        lcd.print("T:");
        lcd.print(temperatura, 1); // 1 casa decimal
        lcd.print("C U:");
        lcd.print(umidade, 1);     // 1 casa decimal
        lcd.print("%  ");

        // Log para o monitor serial
        Serial.print("Temperatura: ");
        Serial.println(temperatura);
        Serial.print("Umidade: ");
        Serial.println(umidade);

        // Envia dados para o servidor
        HTTPClient http;
        http.begin(serverName);
        http.addHeader("Content-Type", "application/json");
        http.setTimeout(30000); // Timeout de 30 segundos

        String postData = "{\"dados_temp\":" + String(temperatura) + ",\"dados_umid\":" + String(umidade) + ",\"equip_id\":" + String(equip_id) + "}";
        Serial.println("Iniciando a conexão HTTP...");
        Serial.println("URL: " + String(serverName));
        Serial.println("Dados enviados: " + postData);

        int httpResponseCode = http.POST(postData);

        // Tratamento do código de resposta
        if (httpResponseCode > 0) {
            String response = http.getString();
            Serial.println("Resposta do servidor: " + response);
            statusEnvio = "Enviado";
        } else {
            Serial.print("Erro na requisição: ");
            Serial.println(httpResponseCode);
            Serial.println("Descrição do erro: " + http.errorToString(httpResponseCode));
            statusEnvio = "Erro   ";
        }
        http.end();
    } else {
        Serial.println("Erro ao ler o sensor DHT!");
        lcd.setCursor(0, 1);
        lcd.print("Erro Sensor DHT  ");
    }

    // Atualiza a primeira linha com o status do Wi-Fi e envio
    lcd.setCursor(0, 0);
    lcd.print("WiFi: ");
    lcd.print(statusEnvio);
    lcd.print("  "); // Preenche espaços extras

    delay(10000); // Atualiza a cada 10 segundos
}
